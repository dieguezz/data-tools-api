// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/nif.proto

package protopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NifApiClient is the client API for NifApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NifApiClient interface {
	// NIF
	GetNIFControlDigit(ctx context.Context, in *NIF, opts ...grpc.CallOption) (*ControlDigitResponse, error)
	GetType(ctx context.Context, in *NIF, opts ...grpc.CallOption) (*TypeResponse, error)
	GenerateNIF(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*NIF, error)
	GenerateNIFs(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*NIFs, error)
	ValidateNIF(ctx context.Context, in *NIF, opts ...grpc.CallOption) (*IsValid, error)
	// NIE
	GenerateNIE(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*NIE, error)
	GenerateNIEs(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*NIE, error)
	ValidateNIE(ctx context.Context, in *NIE, opts ...grpc.CallOption) (*IsValid, error)
	// NIF - NIE - CIF
	GetParsedDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*ParsedDocumentResponse, error)
	ValidateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*IsValid, error)
	// CIF
	GetCIFControlDigit(ctx context.Context, in *CIF, opts ...grpc.CallOption) (*ControlDigitResponse, error)
	GenerateCIF(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*CIF, error)
	ValidateCIF(ctx context.Context, in *CIF, opts ...grpc.CallOption) (*IsValid, error)
}

type nifApiClient struct {
	cc grpc.ClientConnInterface
}

func NewNifApiClient(cc grpc.ClientConnInterface) NifApiClient {
	return &nifApiClient{cc}
}

func (c *nifApiClient) GetNIFControlDigit(ctx context.Context, in *NIF, opts ...grpc.CallOption) (*ControlDigitResponse, error) {
	out := new(ControlDigitResponse)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GetNIFControlDigit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) GetType(ctx context.Context, in *NIF, opts ...grpc.CallOption) (*TypeResponse, error) {
	out := new(TypeResponse)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GetType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) GenerateNIF(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*NIF, error) {
	out := new(NIF)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GenerateNIF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) GenerateNIFs(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*NIFs, error) {
	out := new(NIFs)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GenerateNIFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) ValidateNIF(ctx context.Context, in *NIF, opts ...grpc.CallOption) (*IsValid, error) {
	out := new(IsValid)
	err := c.cc.Invoke(ctx, "/proto.NifApi/ValidateNIF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) GenerateNIE(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*NIE, error) {
	out := new(NIE)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GenerateNIE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) GenerateNIEs(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*NIE, error) {
	out := new(NIE)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GenerateNIEs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) ValidateNIE(ctx context.Context, in *NIE, opts ...grpc.CallOption) (*IsValid, error) {
	out := new(IsValid)
	err := c.cc.Invoke(ctx, "/proto.NifApi/ValidateNIE", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) GetParsedDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*ParsedDocumentResponse, error) {
	out := new(ParsedDocumentResponse)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GetParsedDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) ValidateDocument(ctx context.Context, in *Document, opts ...grpc.CallOption) (*IsValid, error) {
	out := new(IsValid)
	err := c.cc.Invoke(ctx, "/proto.NifApi/ValidateDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) GetCIFControlDigit(ctx context.Context, in *CIF, opts ...grpc.CallOption) (*ControlDigitResponse, error) {
	out := new(ControlDigitResponse)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GetCIFControlDigit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) GenerateCIF(ctx context.Context, in *BulkParams, opts ...grpc.CallOption) (*CIF, error) {
	out := new(CIF)
	err := c.cc.Invoke(ctx, "/proto.NifApi/GenerateCIF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nifApiClient) ValidateCIF(ctx context.Context, in *CIF, opts ...grpc.CallOption) (*IsValid, error) {
	out := new(IsValid)
	err := c.cc.Invoke(ctx, "/proto.NifApi/ValidateCIF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NifApiServer is the server API for NifApi service.
// All implementations must embed UnimplementedNifApiServer
// for forward compatibility
type NifApiServer interface {
	// NIF
	GetNIFControlDigit(context.Context, *NIF) (*ControlDigitResponse, error)
	GetType(context.Context, *NIF) (*TypeResponse, error)
	GenerateNIF(context.Context, *BulkParams) (*NIF, error)
	GenerateNIFs(context.Context, *BulkParams) (*NIFs, error)
	ValidateNIF(context.Context, *NIF) (*IsValid, error)
	// NIE
	GenerateNIE(context.Context, *BulkParams) (*NIE, error)
	GenerateNIEs(context.Context, *BulkParams) (*NIE, error)
	ValidateNIE(context.Context, *NIE) (*IsValid, error)
	// NIF - NIE - CIF
	GetParsedDocument(context.Context, *Document) (*ParsedDocumentResponse, error)
	ValidateDocument(context.Context, *Document) (*IsValid, error)
	// CIF
	GetCIFControlDigit(context.Context, *CIF) (*ControlDigitResponse, error)
	GenerateCIF(context.Context, *BulkParams) (*CIF, error)
	ValidateCIF(context.Context, *CIF) (*IsValid, error)
	mustEmbedUnimplementedNifApiServer()
}

// UnimplementedNifApiServer must be embedded to have forward compatible implementations.
type UnimplementedNifApiServer struct {
}

func (UnimplementedNifApiServer) GetNIFControlDigit(context.Context, *NIF) (*ControlDigitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNIFControlDigit not implemented")
}
func (UnimplementedNifApiServer) GetType(context.Context, *NIF) (*TypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetType not implemented")
}
func (UnimplementedNifApiServer) GenerateNIF(context.Context, *BulkParams) (*NIF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNIF not implemented")
}
func (UnimplementedNifApiServer) GenerateNIFs(context.Context, *BulkParams) (*NIFs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNIFs not implemented")
}
func (UnimplementedNifApiServer) ValidateNIF(context.Context, *NIF) (*IsValid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNIF not implemented")
}
func (UnimplementedNifApiServer) GenerateNIE(context.Context, *BulkParams) (*NIE, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNIE not implemented")
}
func (UnimplementedNifApiServer) GenerateNIEs(context.Context, *BulkParams) (*NIE, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNIEs not implemented")
}
func (UnimplementedNifApiServer) ValidateNIE(context.Context, *NIE) (*IsValid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateNIE not implemented")
}
func (UnimplementedNifApiServer) GetParsedDocument(context.Context, *Document) (*ParsedDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParsedDocument not implemented")
}
func (UnimplementedNifApiServer) ValidateDocument(context.Context, *Document) (*IsValid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateDocument not implemented")
}
func (UnimplementedNifApiServer) GetCIFControlDigit(context.Context, *CIF) (*ControlDigitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCIFControlDigit not implemented")
}
func (UnimplementedNifApiServer) GenerateCIF(context.Context, *BulkParams) (*CIF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCIF not implemented")
}
func (UnimplementedNifApiServer) ValidateCIF(context.Context, *CIF) (*IsValid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCIF not implemented")
}
func (UnimplementedNifApiServer) mustEmbedUnimplementedNifApiServer() {}

// UnsafeNifApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NifApiServer will
// result in compilation errors.
type UnsafeNifApiServer interface {
	mustEmbedUnimplementedNifApiServer()
}

func RegisterNifApiServer(s grpc.ServiceRegistrar, srv NifApiServer) {
	s.RegisterService(&NifApi_ServiceDesc, srv)
}

func _NifApi_GetNIFControlDigit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GetNIFControlDigit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GetNIFControlDigit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GetNIFControlDigit(ctx, req.(*NIF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_GetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GetType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GetType(ctx, req.(*NIF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_GenerateNIF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GenerateNIF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GenerateNIF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GenerateNIF(ctx, req.(*BulkParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_GenerateNIFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GenerateNIFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GenerateNIFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GenerateNIFs(ctx, req.(*BulkParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_ValidateNIF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).ValidateNIF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/ValidateNIF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).ValidateNIF(ctx, req.(*NIF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_GenerateNIE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GenerateNIE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GenerateNIE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GenerateNIE(ctx, req.(*BulkParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_GenerateNIEs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GenerateNIEs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GenerateNIEs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GenerateNIEs(ctx, req.(*BulkParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_ValidateNIE_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NIE)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).ValidateNIE(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/ValidateNIE",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).ValidateNIE(ctx, req.(*NIE))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_GetParsedDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GetParsedDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GetParsedDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GetParsedDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_ValidateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Document)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).ValidateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/ValidateDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).ValidateDocument(ctx, req.(*Document))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_GetCIFControlDigit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GetCIFControlDigit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GetCIFControlDigit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GetCIFControlDigit(ctx, req.(*CIF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_GenerateCIF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).GenerateCIF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/GenerateCIF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).GenerateCIF(ctx, req.(*BulkParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _NifApi_ValidateCIF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CIF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NifApiServer).ValidateCIF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.NifApi/ValidateCIF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NifApiServer).ValidateCIF(ctx, req.(*CIF))
	}
	return interceptor(ctx, in, info, handler)
}

// NifApi_ServiceDesc is the grpc.ServiceDesc for NifApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NifApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NifApi",
	HandlerType: (*NifApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNIFControlDigit",
			Handler:    _NifApi_GetNIFControlDigit_Handler,
		},
		{
			MethodName: "GetType",
			Handler:    _NifApi_GetType_Handler,
		},
		{
			MethodName: "GenerateNIF",
			Handler:    _NifApi_GenerateNIF_Handler,
		},
		{
			MethodName: "GenerateNIFs",
			Handler:    _NifApi_GenerateNIFs_Handler,
		},
		{
			MethodName: "ValidateNIF",
			Handler:    _NifApi_ValidateNIF_Handler,
		},
		{
			MethodName: "GenerateNIE",
			Handler:    _NifApi_GenerateNIE_Handler,
		},
		{
			MethodName: "GenerateNIEs",
			Handler:    _NifApi_GenerateNIEs_Handler,
		},
		{
			MethodName: "ValidateNIE",
			Handler:    _NifApi_ValidateNIE_Handler,
		},
		{
			MethodName: "GetParsedDocument",
			Handler:    _NifApi_GetParsedDocument_Handler,
		},
		{
			MethodName: "ValidateDocument",
			Handler:    _NifApi_ValidateDocument_Handler,
		},
		{
			MethodName: "GetCIFControlDigit",
			Handler:    _NifApi_GetCIFControlDigit_Handler,
		},
		{
			MethodName: "GenerateCIF",
			Handler:    _NifApi_GenerateCIF_Handler,
		},
		{
			MethodName: "ValidateCIF",
			Handler:    _NifApi_ValidateCIF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/nif.proto",
}
