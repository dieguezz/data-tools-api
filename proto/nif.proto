syntax = "proto3";

option go_package = "github.com/dieguezz/nif-tools/protopb";

package proto;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

service NifApi {
  // NIF
  rpc GetNIFControlDigit(NIF) returns (ControlDigitResponse) {
    option (google.api.http) = {
      get : "/nif/controldigit/{nif}"
    };
  };
  rpc GetType(NIF) returns (TypeResponse) {
    option (google.api.http) = {
      get : "/nif/type/{nif}"
    };
  };
  rpc GenerateNIF(google.protobuf.Empty) returns (NIF) {
    option (google.api.http) = {
      get : "/nif/generate"
    };
  };
  rpc GenerateNIFs(BulkParams) returns (NIFs) {
    option (google.api.http) = {
      get : "/nif/generate/bulk"
    };
  };
  rpc ValidateNIF(NIF) returns (IsValid) {
    option (google.api.http) = {
      get : "/nif/validate/{nif}"
    };
  };

  // NIE
  rpc GenerateNIE(google.protobuf.Empty) returns (NIE) {
    option (google.api.http) = {
      get : "/nie/generate"
    };
  };
  rpc GenerateNIEs(BulkParams) returns (NIEs) {
    option (google.api.http) = {
      get : "/nie/generate/bulk"
    };
  };
  rpc ValidateNIE(NIE) returns (IsValid) {
    option (google.api.http) = {
      get : "/nie/validate/{nie}"
    };
  };

  // NIF - NIE - CIF
  rpc GetParsedDocument(Document) returns (ParsedDocumentResponse) {
    option (google.api.http) = {
      get : "/document/parse/{document}"
    };
  };
  rpc ValidateDocument(Document) returns (IsValid) {
    option (google.api.http) = {
      get : "/document/validate/{document}"
    };
  };

  // CIF
  rpc GetCIFControlDigit(CIF) returns (ControlDigitResponse) {
    option (google.api.http) = {
      get : "/cif/controldigit/{cif}"
    };
  };
  rpc GenerateCIF(BulkParams) returns (CIF) {
    option (google.api.http) = {
      get : "/cif/generate"
    };
  };
  rpc GenerateCIFs(BulkParams) returns (CIFs) {
    option (google.api.http) = {
      get : "/cif/generate/bulk"
    };
  };
  rpc ValidateCIF(CIF) returns (IsValid) {
    option (google.api.http) = {
      get : "/cif/validate/{cif}"
    };
  };

  // Mortgage
  rpc GetAmortization(MortgageAmortizationRequest)
      returns (MortgageAmortizationResponse) {
    option (google.api.http) = {
      get : "/amortization"
    };
  };

}

message NIF { string nif = 1; }

message NIFs { repeated string NIFs = 1; }

message NIEs { repeated string NIEs = 1; }

message CIF { string cif = 1; }

message CIFs { repeated string CIFs = 1; }

message BulkParams { optional int32 amount = 1; }

message Document { string document = 1; }

message ControlDigitResponse { string control_digit = 1; }

message ParsedDocumentResponse {
  int32 number = 1;
  string kind = 2;
  string control = 3;
}

message TypeResponse { string type = 1; }

message NIE { string nie = 1; }

message IsValid { bool isValid = 1; }

message MortgageAmortizationRequest {
  float capital = 1;
  int32 terms = 2;
  float interestType = 3;
  float amortizationAmount = 4;
  int32 amortizationYear = 5;
  int32 amortizationMonth = 6;
}

message Fee {
  int32 year = 1;
  int32 month = 2;
  double price = 3;
  double price_for_time = 4;
  double interest = 5;
  double interest_for_time = 6;
  double amortization = 7;
  double amortization_for_time = 8;
  double pending_capital = 9;
  double pending_capital_for_time = 10;
}

message MortgageAmortizationResponse {
  int32 interestSavingsForPrice = 1;
  int32 monthlyPrice = 2;
  int32 pendingPayments = 3;
  int32 timeSavingsMonth = 4;
  int32 timeSavingsYear = 5;
  int32 totalTimeInterest = 6;
  repeated Fee fees = 7;
}
